package com.pool;

/**
 * created on 2019/7/5 16:50
 *
 * @author nfboy_liusong@163.com
 * @version 1.0.0
 */
public class PoolTest {

    /**
     * 线程池优点：
     * 1.降低资源消耗，通过重复利用已创建的线程降低线程创建和销毁造成的消耗；
     * 2.提高响应速度，当任务到达时，任务可以不需要等到线程创建就能立即执行；
     * 3.提高线程可管理性，线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性；
     *   使用线程池可以做到线程的统一分配、调优和监控‘；
     */

    /**
     * 线程池工作原理：
     * 一、
     * 1.提交一个线程到线程池中，判断线程池的核心线程是否都在执行任务；
     * 2.如果不是（""核心线程空闲或者还有核心线程没有创建），则创建一个新的工作线程来执行任务；
     * 3.如果核心线程都在执行任务，则进入下一个流程；
     * 二、
     * 1.线程池判断工作队列是否已满；
     * 2.如果工作队列没有满，则将新提交的任务存储在这个工作队列里，如果工作队列满了，进入下一个流程；
     * 三、
     * 1.判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务；
     * 2.如果都处于工作状态，则交给饱和策略来处理这个任务。
     */

    /**
     * 自定义线程池 ThreadPoolExecutor 参数：
     * 1.corePoolSize 核心线程池大小
     * 2.maximumPoolSize 最大线程池大小
     * 3.keepAliveTime  线程最大空闲时间
     * 4.unit 时间单位
     * 5.workQueue 线程等待队列
     * 6.threadFactory 线程创建工厂
     * 7.handler 拒绝策略
     */

    /**
     * 合理配置线程池参数：
     * 1.最佳线程数目 = （（线程等待时间 + 线程CPU时间）/线程CPU时间 ）* CPU数目；
     * 2.线程等待时间所占比例越高，需要越多线程。线程CPU时间所占比例越高，需要越少线程；
     */


}
